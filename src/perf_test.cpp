////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothxml. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#include "perf_test.h"

namespace slothxml {

perf_object_t::perf_object_t()
{
    bool_val = false;
    __skip_bool_val = false;
    __xml_has_bool_val = false;

    int8_val = 0;
    __skip_int8_val = false;
    __xml_has_int8_val = false;

    uint8_val = 0;
    __skip_uint8_val = false;
    __xml_has_uint8_val = false;

    int16_val = 0;
    __skip_int16_val = false;
    __xml_has_int16_val = false;

    uint16_val = 0;
    __skip_uint16_val = false;
    __xml_has_uint16_val = false;

    int32_val = 0;
    __skip_int32_val = false;
    __xml_has_int32_val = false;

    uint32_val = 0;
    __skip_uint32_val = false;
    __xml_has_uint32_val = false;

    int64_val = 0;
    __skip_int64_val = false;
    __xml_has_int64_val = false;

    uint64_val = 0;
    __skip_uint64_val = false;
    __xml_has_uint64_val = false;

    float_val = 0.0;
    __skip_float_val = false;
    __xml_has_float_val = false;

    double_val = 0.0;
    __skip_double_val = false;
    __xml_has_double_val = false;

    __skip_str_val = false;
    __xml_has_str_val = false;

    __skip_vec_val = false;
    __xml_has_vec_val = false;

    __skip_dict_val = false;
    __xml_has_dict_val = false;
}

perf_object_t& perf_object_t::operator=(const perf_object_t& obj_val)
{
    this->bool_val = obj_val.bool_val;
    this->int8_val = obj_val.int8_val;
    this->uint8_val = obj_val.uint8_val;
    this->int16_val = obj_val.int16_val;
    this->uint16_val = obj_val.uint16_val;
    this->int32_val = obj_val.int32_val;
    this->uint32_val = obj_val.uint32_val;
    this->int64_val = obj_val.int64_val;
    this->uint64_val = obj_val.uint64_val;
    this->float_val = obj_val.float_val;
    this->double_val = obj_val.double_val;
    this->str_val = obj_val.str_val;
    this->vec_val = obj_val.vec_val;
    this->dict_val = obj_val.dict_val;
    return *this;
}

bool perf_object_t::operator==(const perf_object_t& obj_val) const
{
    if (!(this->bool_val == obj_val.bool_val)) return false;
    if (!(this->int8_val == obj_val.int8_val)) return false;
    if (!(this->uint8_val == obj_val.uint8_val)) return false;
    if (!(this->int16_val == obj_val.int16_val)) return false;
    if (!(this->uint16_val == obj_val.uint16_val)) return false;
    if (!(this->int32_val == obj_val.int32_val)) return false;
    if (!(this->uint32_val == obj_val.uint32_val)) return false;
    if (!(this->int64_val == obj_val.int64_val)) return false;
    if (!(this->uint64_val == obj_val.uint64_val)) return false;
    if (!(this->float_val == obj_val.float_val)) return false;
    if (!(this->double_val == obj_val.double_val)) return false;
    if (!(this->str_val == obj_val.str_val)) return false;
    if (!(this->vec_val == obj_val.vec_val)) return false;
    if (!(this->dict_val == obj_val.dict_val)) return false;
    return true;
}

bool perf_object_t::encode(xml_document_t& doc, xml_element_t& xml_val) const
{
    do
    {
        if (!__skip_bool_val && !encode_field(bool_val, "bool_val", doc, xml_val)) break;
        if (!__skip_int8_val && !encode_field(int8_val, "int8_val", doc, xml_val)) break;
        if (!__skip_uint8_val && !encode_field(uint8_val, "uint8_val", doc, xml_val)) break;
        if (!__skip_int16_val && !encode_field(int16_val, "int16_val", doc, xml_val)) break;
        if (!__skip_uint16_val && !encode_field(uint16_val, "uint16_val", doc, xml_val)) break;
        if (!__skip_int32_val && !encode_field(int32_val, "int32_val", doc, xml_val)) break;
        if (!__skip_uint32_val && !encode_field(uint32_val, "uint32_val", doc, xml_val)) break;
        if (!__skip_int64_val && !encode_field(int64_val, "int64_val", doc, xml_val)) break;
        if (!__skip_uint64_val && !encode_field(uint64_val, "uint64_val", doc, xml_val)) break;
        if (!__skip_float_val && !encode_field(float_val, "float_val", doc, xml_val)) break;
        if (!__skip_double_val && !encode_field(double_val, "double_val", doc, xml_val)) break;
        if (!__skip_str_val && !encode_field(str_val, "str_val", doc, xml_val)) break;
        if (!__skip_vec_val && !encode_field(vec_val, "vec_val", doc, xml_val)) break;
        if (!__skip_dict_val && !encode_field(dict_val, "dict_val", doc, xml_val)) break;

        return true;
    } while (0);

    return false;
}

bool perf_object_t::decode(const xml_element_t& xml_val)
{
    do
    {
        if (!decode_field(xml_val, "bool_val", bool_val, __xml_has_bool_val)) break;
        if (!decode_field(xml_val, "int8_val", int8_val, __xml_has_int8_val)) break;
        if (!decode_field(xml_val, "uint8_val", uint8_val, __xml_has_uint8_val)) break;
        if (!decode_field(xml_val, "int16_val", int16_val, __xml_has_int16_val)) break;
        if (!decode_field(xml_val, "uint16_val", uint16_val, __xml_has_uint16_val)) break;
        if (!decode_field(xml_val, "int32_val", int32_val, __xml_has_int32_val)) break;
        if (!decode_field(xml_val, "uint32_val", uint32_val, __xml_has_uint32_val)) break;
        if (!decode_field(xml_val, "int64_val", int64_val, __xml_has_int64_val)) break;
        if (!decode_field(xml_val, "uint64_val", uint64_val, __xml_has_uint64_val)) break;
        if (!decode_field(xml_val, "float_val", float_val, __xml_has_float_val)) break;
        if (!decode_field(xml_val, "double_val", double_val, __xml_has_double_val)) break;
        if (!decode_field(xml_val, "str_val", str_val, __xml_has_str_val)) break;
        if (!decode_field(xml_val, "vec_val", vec_val, __xml_has_vec_val)) break;
        if (!decode_field(xml_val, "dict_val", dict_val, __xml_has_dict_val)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const perf_object_t& obj_val, xml_document_t& doc, xml_element_t& xml_val)
{
    return obj_val.encode(doc, xml_val);
}

bool decode(const xml_element_t& xml_val, perf_object_t& obj_val)
{
    return obj_val.decode(xml_val);
}

} // namespace slothxml